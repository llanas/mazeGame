{"version":3,"sources":["webpack://[name]/./src/algo/mazegen/mazegen-bomb-impl.ts","webpack://[name]/./src/algo/mazegen/mazegen-build-impl.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/model/door.ts","webpack://[name]/./src/model/maze-grid.ts","webpack://[name]/./src/model/square.ts","webpack://[name]/./src/utils/drawer.ts","webpack://[name]/./src/utils/utils.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import IMazeGenerator from \"./mazegen-interface\";\r\nimport MazeGrid from \"../../model/maze-grid\";\r\nimport Square from \"../../model/square\";\r\nimport Utils from \"../../utils/utils\";\r\nimport Door from \"../../model/door\";\r\n\r\nexport default class BombMazeGenerator implements IMazeGenerator {\r\n    \r\n    isGenerationOver: boolean;\r\n    mazeGrid: MazeGrid;\r\n\r\n    listDoorsAvailable: Door[];\r\n\r\n    constructor(_mazeGrid: MazeGrid) {\r\n        this.mazeGrid = _mazeGrid;\r\n        this.isGenerationOver = false;\r\n        this.listDoorsAvailable = _mazeGrid.listDoors.filter(door => door.isOpenable);\r\n    }\r\n\r\n    step(): void {\r\n\r\n        let rand = Utils.getRandomInt(this.listDoorsAvailable.length);\r\n        let doorInProgress = this.listDoorsAvailable[rand];\r\n    \r\n        let squareMin = (doorInProgress.isVertical) ? \r\n            this.mazeGrid.getSquare(doorInProgress.x - 1, doorInProgress.y) : \r\n            this.mazeGrid.getSquare(doorInProgress.x, doorInProgress.y - 1);\r\n\r\n        let squareMax = this.mazeGrid.getSquare(doorInProgress.x, doorInProgress.y);\r\n    \r\n        if(squareMin.number < squareMax.number) {\r\n            squareMin.isTreated = true;\r\n            this.mazeGrid.listSquares.filter(square => square.number === squareMax.number).forEach(square => square.number = squareMin.number);\r\n            squareMax.isTreated = true;\r\n            doorInProgress.open();\r\n        } else if(squareMin.number > squareMax.number) {\r\n            squareMin.isTreated = true;\r\n            this.mazeGrid.listSquares.filter(square => square.number === squareMin.number).forEach(square => square.number = squareMax.number);\r\n            squareMax.isTreated = true;\r\n            doorInProgress.open();\r\n        }\r\n        this.listDoorsAvailable.splice(rand, 1);\r\n        if(this.mazeGrid.listSquares.filter(square => square.number != 0).length == 0) {\r\n            this.isGenerationOver = true;\r\n        }\r\n    }\r\n}","import IMazeGenerator from \"./mazegen-interface\";\r\nimport MazeGrid from \"../../model/maze-grid\";\r\nimport Square from \"../../model/square\";\r\nimport Utils from \"../../utils/utils\";\r\n\r\nexport default class BuildMazeGenerator implements IMazeGenerator {\r\n\r\n    isGenerationOver: boolean;\r\n    mazeGrid: MazeGrid;\r\n\r\n    squareTreatedPool: Square[];\r\n\r\n    constructor(_mazeGrid: MazeGrid) {\r\n        this.mazeGrid = _mazeGrid;\r\n        this.isGenerationOver = false;\r\n        this.squareTreatedPool = [];\r\n    }\r\n\r\n    step(): void {\r\n        let squareInProgress;\r\n        if(this.squareTreatedPool.length == 0) {\r\n            squareInProgress = this.mazeGrid.getSquareByPosition(Utils.getRandomInt(this.mazeGrid.listSquares.length));\r\n            this.squareTreatedPool.push(squareInProgress);\r\n        } else {\r\n            squareInProgress = this.squareTreatedPool[this.squareTreatedPool.length - 1];\r\n        }\r\n\r\n        let neighboursAvailable = [];\r\n\r\n        if(squareInProgress.topDoor.isOpenable) {\r\n            let topSquare = this.mazeGrid.getSquareByPosition(squareInProgress.position - 1);\r\n            if(!topSquare.isTreated) neighboursAvailable.push(topSquare);\r\n        }\r\n        \r\n        if(squareInProgress.rightDoor.isOpenable) {\r\n            let rightSquare = this.mazeGrid.getSquareByPosition(squareInProgress.position + this.mazeGrid.mazeHeight);\r\n            if(!rightSquare.isTreated) neighboursAvailable.push(rightSquare);\r\n        }\r\n\r\n        if(squareInProgress.bottomDoor.isOpenable) {\r\n            let bottomSquare = this.mazeGrid.getSquareByPosition(squareInProgress.position + 1);\r\n            if(!bottomSquare.isTreated) neighboursAvailable.push(bottomSquare);\r\n        }\r\n\r\n        if(squareInProgress.leftDoor.isOpenable) {\r\n            let leftSquare = this.mazeGrid.getSquareByPosition(squareInProgress.position - this.mazeGrid.mazeWidth);\r\n            if(!leftSquare.isTreated) neighboursAvailable.push(leftSquare);\r\n        }\r\n\r\n        if(neighboursAvailable.length !== 0) {\r\n            let nextSquareToTreat = neighboursAvailable[Utils.getRandomInt(neighboursAvailable.length)];\r\n            nextSquareToTreat.isInSolutionPath = true;\r\n            this.mazeGrid.openDoorBetweenSquares(squareInProgress, nextSquareToTreat);\r\n            this.squareTreatedPool.push(nextSquareToTreat);\r\n        } else {\r\n            this.squareTreatedPool[this.squareTreatedPool.length - 1].isInSolutionPath = false;\r\n            this.squareTreatedPool.splice(this.squareTreatedPool.length - 1, 1);\r\n        }\r\n        if(this.squareTreatedPool.length === 0) {\r\n            this.isGenerationOver = true;\r\n        }\r\n    }\r\n}","import MazeGrid from \"./model/maze-grid\";\r\nimport Drawer from \"./utils/drawer\";\r\nimport IMazeGenerator from \"./algo/mazegen/mazegen-interface\";\r\nimport BuildMazeGenerator from \"./algo/mazegen/mazegen-build-impl\";\r\nimport BombMazeGenerator from \"./algo/mazegen/mazegen-bomb-impl\";\r\n\r\nlet maze: MazeGrid = null;\r\nlet mazeGenAlgo: IMazeGenerator;\r\nlet drawer: Drawer = null;\r\n\r\nexport function init() {\r\n    initMaze();\r\n\r\n    drawer = new Drawer(\"map\");\r\n    drawer.drawMaze(maze);\r\n    drawer.display();\r\n}\r\n\r\nexport function initMaze() {\r\n    let _mapWidthInput = <HTMLInputElement> document.getElementById(\"mapWidth\");\r\n    let _mapHeightInput = <HTMLInputElement> document.getElementById(\"mapHeight\");\r\n    maze = new MazeGrid(_mapWidthInput.valueAsNumber, _mapHeightInput.valueAsNumber);\r\n    mazeGenAlgo = _getMazeGenAlgo();\r\n}\r\n\r\nexport function process() {\r\n    if(maze != null) {\r\n        if(mazeGenAlgo.isGenerationOver) {\r\n            maze.resetMaze();\r\n            mazeGenAlgo = _getMazeGenAlgo();\r\n        }\r\n        console.time(\"mazeGen\");\r\n        while(!mazeGenAlgo.isGenerationOver) {\r\n            mazeGenAlgo.step();\r\n        }\r\n        console.timeEnd(\"mazeGen\");\r\n        drawer.drawMaze(maze);\r\n    }\r\n}\r\n\r\nexport function step() {\r\n    if(maze != null && mazeGenAlgo != null) {\r\n        if(mazeGenAlgo.isGenerationOver) {\r\n            console.log(\"Maze is fully generated\");\r\n        } else {\r\n            mazeGenAlgo.step();\r\n            drawer.drawMaze(maze);\r\n        }\r\n    }\r\n}\r\n\r\nfunction _getMazeGenAlgo(): IMazeGenerator {\r\n    let _algoGenInput = <HTMLInputElement> document.querySelector('input[name=\"algoInput\"]:checked');\r\n    switch(_algoGenInput.value) {\r\n        case \"build\": \r\n            return new BuildMazeGenerator(maze);\r\n        case \"bomb\": \r\n            return new BombMazeGenerator(maze);\r\n    }\r\n}","export default class Door {\r\n\r\n    static listDoors: Door[] = [];\r\n\r\n    isOpenable: boolean;\r\n    isOpen: boolean;\r\n\r\n    x: number;\r\n    y: number;\r\n    isVertical: boolean;\r\n\r\n    constructor(_mapX: number, _mapY: number, _isVertical: boolean, _isOpenable: boolean) {\r\n        this.isOpenable = _isOpenable;\r\n        this.isOpen = false;\r\n        this.x = _mapX;\r\n        this.y = _mapY;\r\n        this.isVertical = _isVertical;\r\n\r\n        Door.listDoors.push(this);\r\n    }\r\n\r\n    open(): void {\r\n        if (this.isOpenable) {\r\n            this.isOpen = true;\r\n        }\r\n    }\r\n}\r\n","import Square from \"./square\";\r\nimport Door from \"./door\";\r\n\r\nexport default class MazeGrid {\r\n    \r\n    mazeWidth: number;\r\n    mazeHeight: number;\r\n    grid: Square[][] = [];\r\n\r\n    listSquares: Square[] = [];\r\n    listDoors: Door[] = [];\r\n\r\n    resetMaze() {\r\n        this.listSquares = [];\r\n        this.listDoors = [];\r\n        this.grid = [];\r\n        \r\n        this.generateGrid();\r\n        this.generateDoors();\r\n    }\r\n\r\n    constructor(_mazeWidth: number, _mazeHeight: number) {\r\n        this.mazeWidth = _mazeWidth;\r\n        this.mazeHeight = _mazeHeight;\r\n\r\n        this.generateGrid();\r\n        this.generateDoors();\r\n    }\r\n\r\n    private generateGrid(): void {\r\n        for(let x = 0; x < this.mazeWidth; x++) {\r\n            let colomn: Square[] = [];\r\n            this.grid.push(colomn);\r\n            for(let y = 0; y < this.mazeHeight; y++) {\r\n                let square = this._buildSquare(x, y);\r\n                colomn.push(square);\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateDoors() {\r\n        for (let i = 0; i < this.listSquares.length; i++) {\r\n            const square = this.listSquares[i];\r\n\r\n            if(square.y !== 0) {\r\n                square.topDoor = this.getSquareByPosition(square.position - 1).bottomDoor;\r\n            } else {\r\n                square.topDoor = this._buildDoor(square.x, square.y, false, false);\r\n            }\r\n\r\n            if(square.x !== 0) {\r\n                square.leftDoor = this.getSquareByPosition(square.position - this.mazeHeight).rightDoor;\r\n            } else {\r\n                square.leftDoor = this._buildDoor(square.x, square.y, true, false);\r\n            }\r\n\r\n            square.rightDoor = this._buildDoor(square.x + 1, square.y, true, square.x !== this.mazeWidth - 1);\r\n            square.bottomDoor = this._buildDoor(square.x, square.y + 1, false, square.y !== this.mazeHeight - 1);\r\n        }\r\n    }\r\n\r\n    getSquare(_gridX: number, _gridY: number): Square {\r\n        if(_gridX < this.mazeWidth && _gridY < this.mazeHeight) {\r\n            return this.grid[_gridX][_gridY];\r\n        } else {\r\n            throw \"La case demandé n'est pas dans le labyrinthe\";\r\n        }\r\n    }\r\n\r\n    getSquareByPosition(position: number): Square {\r\n        return this.grid[Math.floor(position / this.mazeWidth)][position % this.mazeHeight];\r\n    }\r\n\r\n    openDoorBetweenSquares(squareMax: Square, squareMin: Square): void {\r\n        if(squareMin.position > squareMax.position) {\r\n            let squareTemp = squareMax;\r\n            squareMax = squareMin;\r\n            squareMin = squareTemp;\r\n        }\r\n\r\n        switch(squareMax.position - squareMin.position) {\r\n            case 1: \r\n                squareMin.bottomDoor.open();\r\n                squareMin.isTreated = true;\r\n                squareMax.isTreated = true;\r\n                break;\r\n            case this.mazeWidth:\r\n                squareMin.rightDoor.open();\r\n                squareMin.isTreated = true;\r\n                squareMax.isTreated = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _buildSquare(_positionX: number, _positionY: number): Square {\r\n        let newSquare = new Square(this.listSquares.length, _positionX, _positionY);\r\n        this.listSquares.push(newSquare);\r\n        return newSquare;\r\n    }\r\n\r\n    private _buildDoor(_positionX: number, _positionY: number, _isVerticale: boolean, _isOpenable: boolean): Door {\r\n        let newDoor = new Door(_positionX, _positionY, _isVerticale, _isOpenable);\r\n        this.listDoors.push(newDoor);\r\n        return newDoor;\r\n    }\r\n}","import Door from \"./door\";\r\n\r\nexport default class Square {\r\n\r\n    public static listSquares: Square[] = [];\r\n\r\n    position: number;\r\n    number: number;\r\n    x: number;\r\n    y: number;\r\n    isTreated: boolean;\r\n    isInSolutionPath: boolean;\r\n\r\n    topDoor: Door;\r\n    rightDoor: Door;\r\n    bottomDoor: Door;\r\n    leftDoor: Door;\r\n\r\n    constructor(_number: number, _mapX: number, _mapY: number) {\r\n        this.position = _number;\r\n        this.number = _number;\r\n        this.x = _mapX;\r\n        this.y = _mapY;\r\n        this.isTreated = false;\r\n        \r\n        Square.listSquares.push(this);\r\n    }\r\n\r\n    getColor(): string {\r\n        if(this.isInSolutionPath) {\r\n            return 'rgb(125, 125, 200)'\r\n        } else{\r\n            return (this.isTreated) ? 'rgb(200, 225, 55)' : 'rgb(220, 90, 90)';\r\n        }\r\n    }\r\n}\r\n","import MazeGrid from \"../model/maze-grid\";\r\nimport Square from \"../model/square\";\r\nimport Door from \"../model/door\";\r\n\r\nconst squareSize = 20;\r\n\r\nexport default class Drawer {\r\n\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n\r\n    constructor(_canvasId: string) {\r\n        this.canvas = <HTMLCanvasElement> document.getElementById(_canvasId);\r\n        if(this.canvas.getContext) {\r\n            this.context = this.canvas.getContext(\"2d\");\r\n        } else {\r\n            throw \"Le canvas demandé n'existe pas ou n'est pas un élément canvas\";\r\n        }\r\n    }\r\n\r\n    display() {\r\n        this.canvas.hidden = false;\r\n    }\r\n\r\n    drawMaze(_mazeGrid: MazeGrid): void {\r\n        if(_mazeGrid != null && _mazeGrid.grid.length != 0) {\r\n            this.canvas.width = _mazeGrid.mazeWidth * squareSize;\r\n            this.canvas.height = _mazeGrid.mazeHeight * squareSize;\r\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n            for (let x = 0; x < _mazeGrid.mazeWidth; x++) {\r\n                for (let y = 0; y < _mazeGrid.mazeHeight; y++) {\r\n                    this.drawSquare(_mazeGrid.grid[x][y]);\r\n                }\r\n            }\r\n            for (let i = 0; i < _mazeGrid.listDoors.length; i++) {\r\n                this.drawDoor(_mazeGrid.listDoors[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSquare(_square: Square): void {\r\n        this.context.fillStyle = _square.getColor();\r\n        this.context.fillRect(_square.x * squareSize, _square.y * squareSize, squareSize, squareSize);\r\n    }\r\n\r\n    drawDoor(_door: Door): void {\r\n        if (!_door.isOpen) {\r\n            this.context.fillStyle = 'rgb(0,0,0)';\r\n            if (_door.isVertical) {\r\n                this.context.fillRect((_door.x * squareSize) - 1, _door.y * squareSize, 1, squareSize);\r\n            }\r\n            else {\r\n                this.context.fillRect(_door.x * squareSize, (_door.y * squareSize) - 1, squareSize, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class Utils {\r\n\r\n    static getRandomInt(maxValue: number): number {\r\n        return Math.floor(Math.random() * Math.floor(maxValue));\r\n    }\r\n}"],"sourceRoot":""}